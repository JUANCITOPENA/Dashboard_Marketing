# pip install -r requirements.txt

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.patches import Rectangle
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time

# ================================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ================================
# Configura las propiedades de la p√°gina de Streamlit
st.set_page_config(
    page_title="üìä Dashboard de Marketing | Insights Visuales",  # T√≠tulo de la pesta√±a del navegador
    page_icon="üéØ",  # Icono que aparece en la pesta√±a
    layout="wide",  # Dise√±o de p√°gina ancho para mejor visualizaci√≥n
    initial_sidebar_state="expanded"  # Barra lateral expandida por defecto
)

# ================================
# ESTILOS CSS PERSONALIZADOS
# ================================
# Aplica estilos CSS para el dise√±o dark mode y mejorar la experiencia de usuario
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    html, body, [class*="css"] {
        font-family: 'Inter', sans-serif;  # Fuente moderna y legible
    }
    
    .main {
        background-color: #0d1117;  # Fondo oscuro principal
        color: #e6edf3;  # Color de texto claro
    }
    
    .stApp {
        background-color: #0d1117;  # Fondo de la aplicaci√≥n
    }
    
    h1, h2, h3, h4, h5, h6 {
        color: #58a6ff !important;  # Color azul para encabezados
        font-weight: 600;  # Peso de fuente seminegro
    }
    
    .stMetric {
        background-color: #161b22 !important;  # Fondo oscuro para m√©tricas
        border-radius: 10px;  # Bordes redondeados
        padding: 15px;  # Espaciado interno
        border: 1px solid #30363d;  # Borde sutil
    }
    
    .stSelectbox, .stMultiSelect {
        background-color: #161b22 !important;  # Fondo oscuro para selectores
        border: 1px solid #30363d !important;  # Borde sutil
        border-radius: 8px;  # Bordes redondeados
        color: #e6edf3 !important;  # Color de texto claro
    }
    
    .stSlider {
        background-color: #161b22 !important;  # Fondo oscuro para sliders
        border-radius: 8px;  # Bordes redondeados
        padding: 10px;  # Espaciado interno
    }
    
    .sidebar .sidebar-content {
        background-color: #161b22 !important;  # Fondo oscuro para barra lateral
    }
    
    .block-container {
        padding-top: 1rem;  # Espaciado superior
        padding-bottom: 1rem;  # Espaciado inferior
    }
    
    .stButton > button {
        background-color: #1f6feb !important;  # Color azul para botones
        color: white !important;  # Texto blanco en botones
        border: none !important;  # Sin borde
        border-radius: 6px !important;  # Bordes redondeados
        padding: 0.5rem 1rem !important;  # Espaciado interno
        font-weight: 500 !important;  # Peso de fuente medio
    }
    
    .stButton > button:hover {
        background-color: #388bfd !important;  # Color m√°s claro al pasar el mouse
    }
    
    .metric-card {
        background: linear-gradient(135deg, #161b22, #0d1117);  # Gradiente para tarjetas de m√©tricas
        border-radius: 12px;  # Bordes redondeados
        padding: 20px;  # Espaciado interno
        border: 1px solid #30363d;  # Borde sutil
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);  # Sombra para profundidad
    }
    
    .insight-box {
        background-color: #161b22;  # Fondo oscuro para cajas de insights
        border-left: 4px solid #58a6ff;  # Borde izquierdo azul
        padding: 15px;  # Espaciado interno
        border-radius: 0 8px 8px 0;  # Bordes redondeados
        margin: 10px 0;  # Margen vertical
    }
    
    .chart-container {
        background-color: #161b22;  # Fondo oscuro para contenedores de gr√°ficos
        border-radius: 12px;  # Bordes redondeados
        padding: 20px;  # Espaciado interno
        border: 1px solid #30363d;  # Borde sutil
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);  # Sombra para profundidad
        margin-bottom: 20px;  # Margen inferior
    }
    
    .footer {
        text-align: center;  # Texto centrado
        padding: 20px;  # Espaciado interno
        color: #8b949e;  # Color gris para el pie de p√°gina
        font-size: 0.9em;  # Tama√±o de fuente m√°s peque√±o
    }
    
    .participant-card {
        background-color: #161b22;  # Fondo oscuro para tarjetas de participantes
        border-radius: 10px;  # Bordes redondeados
        padding: 15px;  # Espaciado interno
        border: 1px solid #30363d;  # Borde sutil
        margin: 5px 0;  # Margen vertical
    }
    
    .emoji-header {
        font-size: 1.5em;  # Tama√±o de fuente para emojis
        margin-right: 10px;  # Margen derecho
    }
</style>
""", unsafe_allow_html=True)

# ================================
# ENCABEZADO (LOGO, T√çTULO, PARTICIPANTES)
# ================================
# Crea tres columnas para organizar el encabezado
col_logo, col_titulo, col_nombres = st.columns([1, 3, 1.5])

# Columna del logo (izquierda)
with col_logo:
    try:
        # Intenta cargar el logo desde el archivo
        st.image("logo.png", width=220)
    except Exception as e:
        # Si no hay logo, muestra un emoji como placeholder
        st.markdown("<div style='text-align: center; font-size: 3em;'>üéØ</div>", unsafe_allow_html=True)

# Columna del t√≠tulo y participantes (centro)
with col_titulo:
    # T√≠tulo principal del dashboard
    st.markdown("<h1 style='text-align: center; margin-bottom: 0.5rem;'>üìä Dashboard de Marketing Estrat√©gico</h1>", unsafe_allow_html=True)
    # Descripci√≥n del dashboard con tama√±o de fuente aumentado
    st.markdown("<p style='text-align: center; color: #8b949e; font-size: 1.6em;'>üìà An√°lisis de Campa√±a de Marketing con üîç Insights Visuales üéØ</p>", unsafe_allow_html=True)

    # Nueva fila para los participantes centrados
    participantes = [
        "Dariel A. Pe√±a",
        "Elvis R. Rosado", 
        "Yaridis Terrero",
        "Junior Padilla",
        "Alfonso"
    ]
    
    # Crea 5 columnas para distribuir los participantes
    cols = st.columns([1, 1, 1, 1, 1])
    for i, participante in enumerate(participantes):
        # Coloca cada participante en una columna espec√≠fica
        with cols[i]:
            # Muestra cada participante en una tarjeta con emoji
            st.markdown(f"<div style='text-align: center;'><div class='participant-card'>üë§ {participante}</div></div>", unsafe_allow_html=True)
            
# ================================
# RESUMEN DEL DASHBOARD
# ================================
# L√≠nea divisoria
st.markdown("---")
# Bloque de informaci√≥n con teor√≠a y uso del dashboard
st.markdown("""
<div class='insight-box'>
    <h3>üéØ Teor√≠a del KPI: Segmentaci√≥n por Edad</h3>
    <p>La edad es un factor determinante en marketing porque define patrones de consumo, poder adquisitivo y preferencias. Este dashboard permite analizar y segmentar clientes para tomar decisiones estrat√©gicas basadas en datos visuales interactivos.</p>
    <p>‚ú® <strong>Usa los filtros en la barra lateral</strong> para explorar diferentes segmentos de clientes y descubrir insights personalizados.</p>
</div>
""", unsafe_allow_html=True)

# ================================
# CARGA Y PREPARACI√ìN DE DATOS
# ================================
# Funci√≥n para cargar y preparar los datos con cache
@st.cache_data
def cargar_datos(path):
    """
    Carga y prepara los datos para el dashboard
    
    Args:
        path (str): Ruta del archivo Excel
    
    Returns:
        pandas.DataFrame: DataFrame con datos procesados
    """
    # Carga el archivo Excel
    df = pd.read_excel(path)
    
    # Calcula la edad a partir del a√±o de nacimiento
    df["Edad"] = 2025 - df["Year_Birth"]
    
    # Calcula el gasto total sumando todas las categor√≠as de gasto
    df["GastoTotal"] = (
        df["MntWines"] + df["MntFruits"] + df["MntMeatProducts"] +
        df["MntFishProducts"] + df["MntSweetProducts"] + df["MntGoldProds"]
    )
    
    # Asigna estado civil (renombrado para claridad)
    df["EstadoCivil"] = df["Marital_Status"]
    
    # Genera datos de g√©nero aleatoriamente (para demostraci√≥n)
    np.random.seed(42)
    df["Genero"] = np.random.choice(["Hombre", "Mujer"], size=len(df))
    
    # Crea rangos de edad para agrupamiento
    df["RangoEdad"] = pd.cut(df["Edad"], bins=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], right=False)
    
    return df

# Carga los datos del archivo
df = cargar_datos("marketing_campaign.xlsx")

# ================================
# BARRA LATERAL DE FILTROS (SIDEBAR)
# ================================
# Contenido de la barra lateral
with st.sidebar:
    # T√≠tulo de los filtros
    st.markdown("<h2 style='color: #58a6ff;'>‚öôÔ∏è Filtros de Segmentaci√≥n</h2>", unsafe_allow_html=True)
    
    # Filtro por estado civil con emojis
    estados_civiles = sorted(df['EstadoCivil'].unique())
    estado_civil_seleccionado = st.multiselect(
        "_estado_civil",
        options=estados_civiles,
        default=estados_civiles,
        format_func=lambda x: f"üíç {x}" if x in ['Married', 'Together'] else f"üë§ {x}"
    )

    # Filtro por rango de edad con emojis
    rangos_edad_opciones = sorted(df['RangoEdad'].astype(str).unique())
    rango_edad_seleccionado = st.multiselect(
        "rango_edad",
        options=rangos_edad_opciones,
        default=rangos_edad_opciones,
        format_func=lambda x: f"üéÇ {x}"
    )

    # Filtro por g√©nero con emojis
    generos = df['Genero'].unique()
    genero_seleccionado = st.multiselect(
        "genero",
        options=generos,
        default=generos,
        format_func=lambda x: f"‚ôÇÔ∏è {x}" if x == "Hombre" else f"‚ôÄÔ∏è {x}"
    )
    
    # Bot√≥n para actualizar el dashboard
    actualizar = st.button("üîÑ Actualizar Dashboard", type="primary")

# Aplica los filtros seleccionados al DataFrame
df_filtrado = df[
    df['EstadoCivil'].isin(estado_civil_seleccionado) &
    df['RangoEdad'].astype(str).isin(rango_edad_seleccionado) &
    df['Genero'].isin(genero_seleccionado)
]

# ================================
# M√âTRICAS PRINCIPALES
# ================================
# T√≠tulo de las m√©tricas clave
st.markdown("### üìä M√©tricas Clave del Segmento Seleccionado")

# Crea 4 columnas para las m√©tricas
col1, col2, col3, col4 = st.columns(4)

# M√©trica 1: Total de clientes segmentados
with col1:
    st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
    st.metric(
        label="üë• Clientes Segmentados", 
        value=f"{len(df_filtrado):,}",
        delta=f"{len(df_filtrado)/len(df)*100:.1f}% del total"
    )
    st.markdown("</div>", unsafe_allow_html=True)

# M√©trica 2: Gasto promedio
with col2:
    st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
    st.metric(
        label="üí∞ Gasto Promedio", 
        value=f"${df_filtrado['GastoTotal'].mean():,.2f}",
        delta=f"${df_filtrado['GastoTotal'].std():,.2f} std"
    )
    st.markdown("</div>", unsafe_allow_html=True)

# M√©trica 3: Edad promedio
with col3:
    st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
    st.metric(
        label="üéÇ Edad Promedio", 
        value=f"{df_filtrado['Edad'].mean():.1f} a√±os",
        delta=f"{df_filtrado['Edad'].std():.1f} a√±os std"
    )
    st.markdown("</div>", unsafe_allow_html=True)

# M√©trica 4: G√©nero dominante
with col4:
    st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
    genero_dominante = df_filtrado['Genero'].mode()[0] if not df_filtrado.empty else "N/A"
    st.metric(
        label="üë§ G√©nero Dominante", 
        value=genero_dominante,
        delta=f"{df_filtrado['Genero'].value_counts().iloc[0] if not df_filtrado.empty else 0} clientes"
    )
    st.markdown("</div>", unsafe_allow_html=True)

# ================================
# CUERPO PRINCIPAL DEL DASHBOARD
# ================================
# L√≠nea divisoria
st.markdown("---")

# Verifica si hay datos filtrados
if df_filtrado.empty:
    # Mensaje de error si no hay datos
    st.error("‚ö†Ô∏è No hay datos disponibles para los filtros seleccionados. Por favor, ampl√≠a tu selecci√≥n.")
else:
    # PRIMERA FILA DE GR√ÅFICOS
    col1, col2 = st.columns(2)

    # Gr√°fico 1: Distribuci√≥n de Edades
    with col1:
        st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
        st.subheader("üéÇ Distribuci√≥n de Edades")
        
        # Histograma interactivo con Plotly
        fig = px.histogram(
            df_filtrado, 
            x="Edad", 
            nbins=25,
            title="Distribuci√≥n de Clientes por Edad",
            color_discrete_sequence=['#58a6ff']
        )
        fig.update_layout(
            plot_bgcolor='#161b22',
            paper_bgcolor='#161b22',
            font_color='#e6edf3',
            title_font_size=16,
            title_x=0.5
        )
        fig.update_traces(marker_line_width=1, marker_line_color="#0d1117")
        st.plotly_chart(fig, use_container_width=True)
        st.caption("üìä Histograma mostrando la frecuencia de clientes por edad")
        st.markdown("</div>", unsafe_allow_html=True)

    # Gr√°fico 2: Edad por Estado Civil
    with col2:
        st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
        st.subheader("üíç Edad por Estado Civil")
        
        # Box plot interactivo
        fig = px.box(
            df_filtrado, 
            x="EstadoCivil", 
            y="Edad",
            title="Distribuci√≥n de Edades por Estado Civil",
            color="EstadoCivil",
            color_discrete_sequence=px.colors.qualitative.Set2
        )
        fig.update_layout(
            plot_bgcolor='#161b22',
            paper_bgcolor='#161b22',
            font_color='#e6edf3',
            title_font_size=16,
            title_x=0.5,
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)
        st.caption("üì¶ Diagrama de cajas mostrando la distribuci√≥n de edades por estado civil")
        st.markdown("</div>", unsafe_allow_html=True)

    # SEGUNDA FILA DE GR√ÅFICOS
    col3, col4 = st.columns(2)

    # Gr√°fico 3: Gasto Promedio por Rango de Edad
    with col3:
        st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
        st.subheader("üí∏ Gasto Promedio por Rango de Edad")
        
        # Agrupa datos por rango de edad para calcular gasto promedio
        gasto_por_rango = df_filtrado.groupby("RangoEdad")["GastoTotal"].mean().reset_index()
        gasto_por_rango['RangoEdad'] = gasto_por_rango['RangoEdad'].astype(str)
        
        # Gr√°fico de barras con color progresivo
        fig = px.bar(
            gasto_por_rango,
            x='RangoEdad',
            y='GastoTotal',
            title='Gasto Total Promedio por Rango de Edad',
            color='GastoTotal',
            color_continuous_scale='Blues'
        )
        fig.update_layout(
            plot_bgcolor='#161b22',
            paper_bgcolor='#161b22',
            font_color='#e6edf3',
            title_font_size=16,
            title_x=0.5,
            xaxis_tickangle=-45
        )
        st.plotly_chart(fig, use_container_width=True)
        st.caption("üìä Barras mostrando el gasto promedio en cada rango de edad")
        st.markdown("</div>", unsafe_allow_html=True)

    # Gr√°fico 4: Pir√°mide Poblacional
    with col4:
        st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
        st.subheader("üë• Pir√°mide Poblacional por G√©nero")
        
        # Prepara datos para la pir√°mide poblacional
        pop = df_filtrado.groupby(["Edad", "Genero"]).size().unstack(fill_value=0)
        if "Hombre" not in pop: pop["Hombre"] = 0
        if "Mujer" not in pop: pop["Mujer"] = 0
        pop["Hombre"] = -pop["Hombre"]

        # Crea gr√°fico de doble barra horizontal
        fig = go.Figure()
        fig.add_trace(go.Bar(
            y=pop.index,
            x=pop["Hombre"],
            name='Hombres',
            orientation='h',
            marker_color='#1f6feb'
        ))
        fig.add_trace(go.Bar(
            y=pop.index,
            x=pop["Mujer"],
            name='Mujeres',
            orientation='h',
            marker_color='#ea60df'
        ))

        fig.update_layout(
            title='Distribuci√≥n de Clientes por Edad y G√©nero',
            plot_bgcolor='#161b22',
            paper_bgcolor='#161b22',
            font_color='#e6edf3',
            title_font_size=16,
            title_x=0.5,
            barmode='relative',
            bargap=0.0,
            bargroupgap=0
        )
        st.plotly_chart(fig, use_container_width=True)
        st.caption("üìä Gr√°fico de doble barra mostrando distribuci√≥n por g√©nero y edad")
        st.markdown("</div>", unsafe_allow_html=True)

    # GR√ÅFICO ADICIONAL: Distribuci√≥n de G√©nero
    st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
    st.subheader("üë§ Distribuci√≥n de G√©nero")
    
    # Crea gr√°fico de pastel con agujero central
    genero_counts = df_filtrado['Genero'].value_counts()
    fig = px.pie(
        values=genero_counts.values,
        names=genero_counts.index,
        title='Distribuci√≥n de Clientes por G√©nero',
        color_discrete_sequence=['#1f6feb', '#ea60df'],
        hole=0.4
    )
    fig.update_layout(
        plot_bgcolor='#161b22',
        paper_bgcolor='#161b22',
        font_color='#e6edf3',
        title_font_size=16,
        title_x=0.5
    )
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("</div>", unsafe_allow_html=True)

    # ================================
    # STORYTELLING FINAL
    # ================================
    st.markdown("---")
    st.markdown("<h3 style='color: #58a6ff;'>üìà Insights y Recomendaciones Estrat√©gicas</h3>", unsafe_allow_html=True)
    
    # Columnas para insights
    col_insights1, col_insights2 = st.columns(2)
    
    # Insights izquierdos
    with col_insights1:
        st.markdown("""
        <div class='insight-box'>
            <h4>üéØ P√∫blico Objetivo Principal</h4>
            <p>La distribuci√≥n de edades revela que el segmento seleccionado est√° compuesto principalmente por clientes entre <strong>{}</strong> a√±os, lo que sugiere un enfoque en adultos j√≥venes a medianos con potencial de compra moderado a alto.</p>
        </div>
        """.format(df_filtrado['Edad'].describe().iloc[2]), unsafe_allow_html=True)
        
        st.markdown("""
        <div class='insight-box'>
            <h4>üí∞ Potencial de Compra</h4>
            <p>El grupo de edad entre <strong>{}</strong> registra el mayor gasto promedio de ${:.2f}, indicando que este segmento es el m√°s valioso para campa√±as de alto valor.</p>
        </div>
        """.format(
            df_filtrado.groupby("RangoEdad")["GastoTotal"].mean().idxmax(),
            df_filtrado.groupby("RangoEdad")["GastoTotal"].mean().max()
        ), unsafe_allow_html=True)

    # Insights derechos
    with col_insights2:
        st.markdown("""
        <div class='insight-box'>
            <h4>üë• Composici√≥n Demogr√°fica</h4>
            <p>El g√©nero dominante es <strong>{}</strong> con {} clientes, lo que indica que las estrategias de marketing deber√≠an considerar preferencias espec√≠ficas de este grupo.</p>
        </div>
        """.format(
            df_filtrado['Genero'].mode()[0],
            df_filtrado['Genero'].value_counts().iloc[0]
        ), unsafe_allow_html=True)
        
        st.markdown("""
        <div class='insight-box'>
            <h4>üíç Estado Civil y Compromiso</h4>
            <p>El estado civil m√°s com√∫n es <strong>{}</strong>, sugiriendo que las campa√±as familiares o de pareja podr√≠an ser particularmente efectivas para este segmento.</p>
        </div>
        """.format(df_filtrado['EstadoCivil'].mode()[0]), unsafe_allow_html=True)

    # Recomendaciones estrat√©gicas
    st.markdown("""
    <div style='background-color: #161b22; padding: 20px; border-radius: 12px; border: 1px solid #30363d; margin-top: 20px;'>
        <h4>üí° Estrategia Recomendada</h4>
        <p>üëâ <strong>Segmentaci√≥n Din√°mica:</strong> Aprovecha los filtros para crear campa√±as personalizadas basadas en edad, g√©nero y estado civil. Combina los insights para crear mensajes espec√≠ficos que resuenen con cada subsegmento.</p>
        <p>üëâ <strong>Enfoque en Gasto:</strong> Dirige recursos hacia el grupo de edad con mayor poder adquisitivo identificado y adapta el contenido del mensaje para maximizar la conversi√≥n.</p>
    </div>
    """, unsafe_allow_html=True)

# FOOTER - Pie de p√°gina
st.markdown("---")
st.markdown("<div class='footer'>üìä Dashboard de Marketing | Desarrollado por Equipo de An√°lisis  Grupo # 1| üéØ Insights Estrat√©gicos</div>", unsafe_allow_html=True)